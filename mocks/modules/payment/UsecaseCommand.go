// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "payment-service/internal/modules/payment/models/request"

	response "payment-service/internal/modules/payment/models/response"
)

// UsecaseCommand is an autogenerated mock type for the UsecaseCommand type
type UsecaseCommand struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: origCtx, payload
func (_m *UsecaseCommand) CreatePayment(origCtx context.Context, payload request.PaymentReq) (*response.PaymentResp, error) {
	ret := _m.Called(origCtx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 *response.PaymentResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PaymentReq) (*response.PaymentResp, error)); ok {
		return rf(origCtx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PaymentReq) *response.PaymentResp); ok {
		r0 = rf(origCtx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.PaymentResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PaymentReq) error); ok {
		r1 = rf(origCtx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTicketOrder provides a mock function with given fields: origCtx, payload
func (_m *UsecaseCommand) CreateTicketOrder(origCtx context.Context, payload request.TicketOrderReq) (*string, error) {
	ret := _m.Called(origCtx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateTicketOrder")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.TicketOrderReq) (*string, error)); ok {
		return rf(origCtx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.TicketOrderReq) *string); ok {
		r0 = rf(origCtx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.TicketOrderReq) error); ok {
		r1 = rf(origCtx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecaseCommand creates a new instance of UsecaseCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecaseCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecaseCommand {
	mock := &UsecaseCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
