// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "payment-service/internal/modules/payment/models/request"

	response "payment-service/internal/modules/payment/models/response"
)

// UsecaseQuery is an autogenerated mock type for the UsecaseQuery type
type UsecaseQuery struct {
	mock.Mock
}

// FindOrderPayment provides a mock function with given fields: origCtx, payload
func (_m *UsecaseQuery) FindOrderPayment(origCtx context.Context, payload request.GetOrderPaymentReq) (*response.GetOrderPaymentResp, error) {
	ret := _m.Called(origCtx, payload)

	if len(ret) == 0 {
		panic("no return value specified for FindOrderPayment")
	}

	var r0 *response.GetOrderPaymentResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.GetOrderPaymentReq) (*response.GetOrderPaymentResp, error)); ok {
		return rf(origCtx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.GetOrderPaymentReq) *response.GetOrderPaymentResp); ok {
		r0 = rf(origCtx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.GetOrderPaymentResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.GetOrderPaymentReq) error); ok {
		r1 = rf(origCtx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaymentList provides a mock function with given fields: origCtx, payload
func (_m *UsecaseQuery) FindPaymentList(origCtx context.Context, payload request.PaymentList) (*response.OrderListResp, error) {
	ret := _m.Called(origCtx, payload)

	if len(ret) == 0 {
		panic("no return value specified for FindPaymentList")
	}

	var r0 *response.OrderListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PaymentList) (*response.OrderListResp, error)); ok {
		return rf(origCtx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PaymentList) *response.OrderListResp); ok {
		r0 = rf(origCtx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.OrderListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PaymentList) error); ok {
		r1 = rf(origCtx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaymentStatus provides a mock function with given fields: origCtx, payload
func (_m *UsecaseQuery) FindPaymentStatus(origCtx context.Context, payload request.PaymentStatusReq) (*response.PaymentStatusResp, error) {
	ret := _m.Called(origCtx, payload)

	if len(ret) == 0 {
		panic("no return value specified for FindPaymentStatus")
	}

	var r0 *response.PaymentStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PaymentStatusReq) (*response.PaymentStatusResp, error)); ok {
		return rf(origCtx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PaymentStatusReq) *response.PaymentStatusResp); ok {
		r0 = rf(origCtx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.PaymentStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PaymentStatusReq) error); ok {
		r1 = rf(origCtx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecaseQuery creates a new instance of UsecaseQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecaseQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecaseQuery {
	mock := &UsecaseQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
