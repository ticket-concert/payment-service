// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "payment-service/internal/modules/payment/models/entity"
	helpers "payment-service/internal/pkg/helpers"

	mock "github.com/stretchr/testify/mock"

	request "payment-service/internal/modules/payment/models/request"
)

// MongodbRepositoryCommand is an autogenerated mock type for the MongodbRepositoryCommand type
type MongodbRepositoryCommand struct {
	mock.Mock
}

// InsertOneOrder provides a mock function with given fields: ctx, order
func (_m *MongodbRepositoryCommand) InsertOneOrder(ctx context.Context, order entity.Order) <-chan helpers.Result {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for InsertOneOrder")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, entity.Order) <-chan helpers.Result); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// InsertOnePayment provides a mock function with given fields: ctx, _a1
func (_m *MongodbRepositoryCommand) InsertOnePayment(ctx context.Context, _a1 entity.PaymentHistory) <-chan helpers.Result {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertOnePayment")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, entity.PaymentHistory) <-chan helpers.Result); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// UpdatePaymentStatus provides a mock function with given fields: ctx, payload
func (_m *MongodbRepositoryCommand) UpdatePaymentStatus(ctx context.Context, payload request.UpdatePaymentStatusReq) <-chan helpers.Result {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentStatus")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdatePaymentStatusReq) <-chan helpers.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// NewMongodbRepositoryCommand creates a new instance of MongodbRepositoryCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongodbRepositoryCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongodbRepositoryCommand {
	mock := &MongodbRepositoryCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
