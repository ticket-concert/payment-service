// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	response "payment-service/internal/modules/payment/models/response"
)

// MidtransRepositoryQuery is an autogenerated mock type for the MidtransRepositoryQuery type
type MidtransRepositoryQuery struct {
	mock.Mock
}

// GetTransactionStatus provides a mock function with given fields: ctx, transactionId
func (_m *MidtransRepositoryQuery) GetTransactionStatus(ctx context.Context, transactionId string) (*response.TransactionStatusResponse, error) {
	ret := _m.Called(ctx, transactionId)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionStatus")
	}

	var r0 *response.TransactionStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.TransactionStatusResponse, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.TransactionStatusResponse); ok {
		r0 = rf(ctx, transactionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TransactionStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMidtransRepositoryQuery creates a new instance of MidtransRepositoryQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMidtransRepositoryQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MidtransRepositoryQuery {
	mock := &MidtransRepositoryQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
